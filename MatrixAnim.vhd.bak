LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.std_logic_unsigned.ALL;

ENTITY MatrixAnim IS
	PORT(
		clk12m : IN STD_LOGIC;
		sin1,sin2,sin3,latch,clkout : OUT STD_LOGIC
	);
END MatrixAnim;

ARCHITECTURE archMatrix OF MatrixAnim IS
SIGNAL counter2M   : STD_LOGIC_VECTOR(2 downto 0);
SIGNAL clk2m       : STD_LOGIC;
SIGNAL counter0_33 : STD_LOGIC_VECTOR(5 downto 0);
SIGNAL sin1dat,sin2dat,sin3dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin4dat,sin5dat,sin6dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin7dat,sin8dat,sin9dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin10dat,sin11dat,sin12dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin13dat,sin14dat,sin15dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin16dat,sin17dat,sin18dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin19dat,sin20dat,sin21dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin22dat,sin23dat,sin24dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin25dat,sin26dat,sin27dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin28dat,sin29dat,sin30dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin31dat,sin32dat,sin33dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin34dat,sin35dat,sin36dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin37dat,sin38dat,sin39dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin40dat,sin41dat,sin42dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin43dat,sin44dat,sin45dat : STD_LOGIC_VECTOR(15 downto 0);
SIGNAL sin46dat,sin47dat,sin48dat : STD_LOGIC_VECTOR(15 downto 0);

BEGIN--CLKDIVIDER
	clkdiv : PROCESS(clk12m)
	BEGIN
		IF rising_edge(clk12m) THEN
			IF counter2M < 5 THEN
				counter2M <= counter2M + 1;
			ELSE
				counter2M <= (OTHERS => '0');
			END IF;
			
			IF counter2M < 3 THEN
				clk2m <= '1';
			ELSE
				clk2m <= '0';
			END IF;
		END IF;
	END PROCESS;
	----------------------------------------
	
	sin1dat <= "1000000000000000"; --ROW0
	sin2dat <= "0111101111000000";
	sin3dat <= "0000000000000000";
	
	sin4dat <= "0100000000000000"; --ROW1
	sin5dat <= "";
	sin6dat <= "";
	
	sin7dat <= "0010000000000000"; --ROW2
	sin8dat <= "";
	sin9dat <= "";
	
	sin10dat <= "0001000000000000"; --ROW3
	sin11dat <= "";
	sin12dat <= "";
	
	sin13dat <= "0000100000000000"; --ROW4
	sin14dat <= "";
	sin15dat <= "";
	
	sin16dat <= "0000010000000000"; --ROW5
	sin17dat <= ""; 
	sin18dat <= "";
	
	sin19dat <= "0000001000000000"; --ROW6
	sin20dat <= "";
	sin21dat <= "";
	
	sin22dat <= "0000000100000000"; --ROW7
	sin23dat <= "";
	sin24dat <= "";
	
	sin25dat <= "0000000010000000"; --ROW8
	sin26dat <= "";
	sin27dat <= "";
	
	sin28dat <= "0000000001000000"; --ROW9
	sin29dat <= "";
	sin30dat <= "";
	
	sin31dat <= "0000000000100000"; --ROW10
	sin32dat <= "";
	sin33dat <= "";
	
	sin34dat <= "0000000000010000"; --ROW11
	sin35dat <= "";
	sin36dat <= "";
	
	sin37dat <= "0000000000001000"; --ROW12
	sin38dat <= "";
	sin39dat <= "";
	
	sin40dat <= "0000000000000100"; --ROW13
	sin41dat <= "";
	sin42dat <= "";
	
	sin43dat <= "0000000000000010"; --ROW14
	sin44dat <= "";
	sin45dat <= "";
	
	sin46dat <= "0000000000000001"; --ROW15
	sin47dat <= "";
	sin48dat <= "";
	-----------------------
	
	PROCESS(clk2m)
	BEGIN
		IF rising_edge(clk2m) THEN
			IF counter0_33 < 33 THEN
				counter0_33 <= counter0_33 + 1;
			ELSE
				counter0_33 <= (OTHERS => '0');
			END IF;
			
			CASE counter0_33 IS
				WHEN "000000" | "000001" => sin1 <= sin1dat(15); sin2 <= sin2dat(15); sin3 <= sin3dat(15); latch <='1';
				WHEN "000010" | "000011" => sin1 <= sin1dat(14); sin2 <= sin2dat(14); sin3 <= sin3dat(14); latch <='1';
				WHEN "000100" | "000101" => sin1 <= sin1dat(13); sin2 <= sin2dat(13); sin3 <= sin3dat(13); latch <='1';
				WHEN "000110" | "000111" => sin1 <= sin1dat(12); sin2 <= sin2dat(12); sin3 <= sin3dat(12); latch <='1';
				WHEN "001000" | "001001" => sin1 <= sin1dat(11); sin2 <= sin2dat(11); sin3 <= sin3dat(11); latch <='1';
				WHEN "001010" | "001011" => sin1 <= sin1dat(10); sin2 <= sin2dat(10); sin3 <= sin3dat(10); latch <='1';
				WHEN "001100" | "001101" => sin1 <= sin1dat(9); sin2 <= sin2dat(9); sin3 <= sin3dat(9); latch <='1';
				WHEN "001110" | "001111" => sin1 <= sin1dat(8); sin2 <= sin2dat(8); sin3 <= sin3dat(8); latch <='1';
				WHEN "010000" | "010001" => sin1 <= sin1dat(7); sin2 <= sin2dat(7); sin3 <= sin3dat(7); latch <='1';
				WHEN "010010" | "010011" => sin1 <= sin1dat(6); sin2 <= sin2dat(6); sin3 <= sin3dat(6); latch <='1';
				WHEN "010100" | "010101" => sin1 <= sin1dat(5); sin2 <= sin2dat(5); sin3 <= sin3dat(5); latch <='1';
				WHEN "010110" | "010111" => sin1 <= sin1dat(4); sin2 <= sin2dat(4); sin3 <= sin3dat(4); latch <='1';
				WHEN "011000" | "011001" => sin1 <= sin1dat(3); sin2 <= sin2dat(3); sin3 <= sin3dat(3); latch <='1';
				WHEN "011010" | "011011" => sin1 <= sin1dat(2); sin2 <= sin2dat(2); sin3 <= sin3dat(2); latch <='1';
				WHEN "011100" | "011101" => sin1 <= sin1dat(1); sin2 <= sin2dat(1); sin3 <= sin3dat(1); latch <='1';
				WHEN "011110" | "011111" => sin1 <= sin1dat(0); sin2 <= sin2dat(0); sin3 <= sin3dat(0); latch <='1';
				WHEN OTHERS => sin1 <= '0'; sin2 <= '0'; sin3 <= '0'; latch <= '0';
			END CASE;
			
			clkout <= NOT counter0_33(0);
			
		END IF;
	END PROCESS;
END archMatrix;